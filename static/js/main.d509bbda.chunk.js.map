{"version":3,"sources":["assets/rambler.png","assets/pareporter.png","assets/ltunes.png","components/CardWrapper/index.js","components/ProjectCard/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardWrapper","props","className","children","ProjectCard","src","thumbnailPath","alt","thumbnailAlt","title","text0","text1","text2","features","href","githubURL","siteURL","Navbar","makeListItems","array","map","item","ramblerFeatures","parFeatures","ltunesFeatures","App","rambler","par","ltunes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,yNCa5BC,MAVf,SAAqBC,GACjB,OACI,yBAAKC,UAAU,uBACX,yBAAKA,UAAU,aACVD,EAAME,Y,MCkCRC,MAtCf,SAAqBH,GACjB,OACI,yBAAKC,UAAU,QACX,yBAAKG,IAAKJ,EAAMK,cAAeJ,UAAU,eAAeK,IAAKN,EAAMO,eAC/D,yBAAKN,UAAU,aACX,wBAAIA,UAAU,cAAcD,EAAMQ,OAClC,2BACIR,EAAMS,OAEV,2BACIT,EAAMU,OAEV,2BACIV,EAAMW,OAEV,4BACKX,EAAMY,UAEX,yBAAKX,UAAU,6BACX,uBAAGY,KAAMb,EAAMc,WACX,gCACI,uBAAGb,UAAU,kBADjB,eAKJ,uBAAGY,KAAMb,EAAMe,SACX,gCACI,uBAAGd,UAAU,kBADjB,eAMR,uBAAGA,UAAU,aAAY,2BAAOA,UAAU,mB,MCb/Ce,MAnBf,WACI,OACI,yBAAKf,UAAU,qBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,YACX,sCAEJ,yBAAKA,UAAU,YACX,0CAEJ,yBAAKA,UAAU,YACX,2C,gDCLdgB,EAAgB,SAAAC,GACpB,OAAOA,EAAMC,KAAI,SAACC,GAAD,OACf,4BAAKA,OAIHC,EAAkB,CACtB,mBACA,0CACA,0DAGIC,EAAc,CAClB,+CACA,+BACA,sBAGIC,EAAiB,CACrB,6CACA,gDACA,6DA6CaC,MA1Cf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEhB,MAAM,qBACNH,cAAeoB,IACflB,aAAa,gBACbE,MAAM,4DACNC,MAAM,6HACNC,MAAM,kGACNC,SAAUK,EAAcI,GACxBP,UAAU,mCACVC,QAAQ,oCAEV,kBAAC,EAAD,CACEP,MAAM,+BACNH,cAAeqB,IACfnB,aAAa,qCACbE,MAAM,2GAENC,MAAM,qGACNE,SAAUK,EAAcK,GACxBR,UAAU,wDACVC,QAAQ,+CAEV,kBAAC,EAAD,CACEP,MAAM,cACNH,cAAesB,IACfpB,aAAa,mBACbE,MAAM,6FACNC,MAAM,GACNE,SAAUK,EAAcM,GACxBT,UAAU,8CACVC,QAAQ,mDCxDEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d509bbda.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rambler.ba121151.png\";","module.exports = __webpack_public_path__ + \"static/media/pareporter.1c829816.png\";","module.exports = __webpack_public_path__ + \"static/media/ltunes.90452549.png\";","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction CardWrapper(props) {\r\n    return (\r\n        <div className=\"container portfolio\">\r\n            <div className=\"card-deck\">\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardWrapper;","import React from 'react';\r\nimport './style.css'\r\n\r\nfunction ProjectCard(props) {\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={props.thumbnailPath} className=\"card-img-top\" alt={props.thumbnailAlt}/>\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{props.title}</h5>\r\n                    <p>\r\n                       {props.text0}\r\n                    </p>\r\n                    <p>\r\n                       {props.text1}\r\n                    </p>\r\n                    <p>\r\n                       {props.text2}\r\n                    </p>\r\n                    <ul>\r\n                        {props.features}\r\n                    </ul>\r\n                    <div className=\"project-links text-center\">\r\n                        <a href={props.githubURL}>\r\n                            <button>\r\n                                <i className=\"fab fa-github\"></i>\r\n                                    Repository\r\n                            </button>\r\n                        </a>\r\n                        <a href={props.siteURL}>\r\n                            <button>\r\n                                <i className=\"fas fa-server\"></i>\r\n                                    Live Site\r\n                            </button>\r\n                        </a>\r\n                    </div>\r\n                    <p className=\"card-text\"><small className=\"text-muted\"></small></p>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectCard;","import React from 'react';\r\nimport './style.css'\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <div className=\"container top-bar\">\r\n            <div className=\"row text-center\">\r\n                <div className=\"col-lg-4\">\r\n                    <h6>ABOUT</h6>\r\n                </div>\r\n                <div className=\"col-lg-4\">\r\n                    <h6>PORTFOLIO</h6>\r\n                </div>\r\n                <div className=\"col-lg-4\">\r\n                    <h6>CONTACT</h6>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport CardWrapper from './components/CardWrapper';\nimport ProjectCard from './components/ProjectCard';\nimport Navbar from './components/Navbar';\nimport rambler from './assets/rambler.png';\nimport par from './assets/pareporter.png';\nimport ltunes from './assets/ltunes.png'\n\nconst makeListItems = array => {\n  return array.map((item) => \n    <li>{item}</li>\n  )\n}\n\nconst ramblerFeatures = [\n  'Powered by React',\n  'Minimalist and intuitive user interface',\n  'Simple OAuth Login & Registration using Google Sign-In', \n];\n\nconst parFeatures = [\n  'User Sign-Up and Web Sessions using Passport',\n  'Categorized posting sections',\n  'Moon phase tracker'\n]\n\nconst ltunesFeatures = [\n  'Geolocate user to provide country location',\n  'Find current top songs in supported countries',\n  'Converts country value entered to ISO 3166 for API search'\n]\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <CardWrapper>\n        <ProjectCard\n          title=\"Rambler Hiking App\"\n          thumbnailPath={rambler}\n          thumbnailAlt=\"Rambler Image\"\n          text0=\"Search and Save hikes from anywhere in the United States.\"\n          text1=\"Add hikes you want to go on to your Bucket List, and view your past accomplishments by adding completed hikes to your Log!\"\n          text2=\"Your Log will give you metrics to stack your hikes against eachother in elevation and distance.\"\n          features={makeListItems(ramblerFeatures)}\n          githubURL=\"https://github.com/dhens/Rambler\"\n          siteURL=\"https://gorambler.herokuapp.com\"\n        />\n        <ProjectCard\n          title=\"Paranormal Activity Reporter\"\n          thumbnailPath={par}\n          thumbnailAlt=\"Paranormal Activity Reporter Image\"\n          text0=\"A Full-Stack forum with user sign-up and authentication, categorized posting sections,\n          and web sessions.\"\n          text1=\"View and Post from 8 seperate conspiracy topics including chem trails, bigfoot, and UFO sightings.\"\n          features={makeListItems(parFeatures)}\n          githubURL=\"https://github.com/dhens/Paranormal-Activity-Reporter\"\n          siteURL=\"https://intense-beach-33729.herokuapp.com/\"\n        />\n        <ProjectCard\n          title=\"Local Tunes\"\n          thumbnailPath={ltunes}\n          thumbnailAlt=\"LocalTunes Image\"\n          text0=\"A MusixMatch API-powered app that finds the current top songs in a user specified country.\"\n          text1=\"\"\n          features={makeListItems(ltunesFeatures)}\n          githubURL=\"https://github.com/KindraKinney/Local-Tunes\"\n          siteURL=\"https://kindrakinney.github.io/Local-Tunes/\"\n        />\n      </CardWrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}